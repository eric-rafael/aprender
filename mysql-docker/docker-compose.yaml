version: '3.8'

services:
  mysql-db:
    image: mysql:8.0
    container_name: mysql-db
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123
      MYSQL_DATABASE: db
    ports:
      - "3306:3306"
    cap_add:
      - SYS_NICE  # Desabilitar o aviso "mbind: Operation not permitted"


# Como criar um banco de dados no MySQL
# O comando para criar um banco de dados é este:
# CREATE DATABASE nome-do-banco;

# Para ver todos os bancos de dados existentes no servidor:
# SHOW DATABASES;

# Em um exemplo prático, a criação do banco de dados testes, ficaria assim:
# CREATE DATABASE testes;

# Você pode exibir os bancos de dados criados, através do comando SHOW:
# SHOW DATABASES;

# Antes de criar uma tabela ou realizar qualquer operação, é necessário selecionar o banco de dados que vai ser usado:
# USE testes;

# Agora, vamos criar uma tabela dentro dele, com o nome clientes:

# CREATE TABLE `clientes` (
#   `idCliente` mediumint(8) unsigned NOT NULL auto_increment,
#   `nomeEmpresa` varchar(255),
#   `nomeDiretor` varchar(255) default NULL,
#   `numEmpregados` mediumint default NULL,
#   PRIMARY KEY (`idCliente`)
# ) AUTO_INCREMENT=1;

# Você pode pedir pro sistema exibir todas as tabelas presentes no banco de dados selecionado:
# SHOW tables;

# Para obter informações sobre uma tabela, você pode usar o comando DESCRIBE ou DESC:
# DESCRIBE clientes;

# Como inserir mais dados em uma tabela
# Vamos “povoar” mais a nossa tabela com alguns dados:

# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (1,"Malesuada Inc.","Johnny Pedd",4847);
# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (2,"Aliquam Inc.","Al Capino",4135);
# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (3,"Union Carbide","Robert Ne Diro",3755);
# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (4,"Magna Carta Ltda.","Wenzel Dashington",3071);
# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (5,"Nunc Corp.","",3859);
# INSERT INTO `clientes` (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`) VALUES (6,"In Company","Macaulay Bulkin",4440);

# Lembra que o campo idCliente foi criado com o parâmetro auto_increment. Seu preenchimento é automático. Você não precisa informar o seu valor, portanto:
# INSERT INTO `clientes`
# (`idCliente`,`nomeEmpresa`,`nomeDiretor`,`numEmpregados`)
# VALUES ('',"GameCorp.","Din Viesel",2071);

# Como ver os registros na tabela com o comando SELECT
# Tal como o nome sugere, o comando SELECT seleciona e exibe os registros gravados na tabela.
# A maneira mais simples de usá-lo é essa:
# SELECT * FROM clientes;

# Você pode refinar a pesquisa de inúmeras maneiras.
# Se quiser ver apenas o conteúdo dos campos id_cliente e nome_empresa, use-o assim:
# SELECT id_cliente, nome_empresa FROM clientes;

# Como remover um registro de uma tabela
# A sintaxe do comando para apagar um registro é:
# DELETE FROM nome-da-tabela WHERE nome-da-coluna=texto;

# Veja um exemplo prático de uso do comando DELETE:
# DELETE FROM clientes WHERE nomeEmpresa = 'GameCorp';

# Com este comando, TODOS os registros que tiverem nomeEmpresa = 'GameCorp' serão eliminados. Neste caso, há apenas 1. Mas vamos imaginar que houvesse 10 ou 100 registros em que o nomeEmpresa fosse igual a GameCorp. Neste caso, seria necessário usar outro campo como referência para encontrar o registro que eu desejo eliminar. No nosso caso, há o campo idCliente, que é único – ele não se repete dentro da tabela:
# DELETE FROM clientes WHERE idCliente = 7;

# Como remover uma tabela ou um banco de dados
# Seja cuidadoso(a). O comando DROP apaga permanentemente uma tabela ou um banco de dados. Veja como usar o DROP para eliminar uma tabela:
# DROP TABLE nome-da-tabela;

# ou, como remover um banco de dados:
# DROP DATABASE nome-do-banco;

# Como limpar uma tabela
# Para limpar uma tabela, use o comando TRUNCATE. Internamente, ele remove a tabela primeiro e, depois, a recria com a mesma estrutura – só que sem os dados. Se houver um contador AUTO_INCREMENT, na tabela em questão, ele é zerado e recolocado. Veja como funciona:
# TRUNCATE TABLE nome-da-tabela;

# Como alterar um registro no MySQL
# Aqui, o comando UPDATE entra em ação. Vamos ver como usá-lo para alterar o valor de um campo dentro de um registro:
# UPDATE clientes SET numEmpregados=1999 WHERE idCliente = 1;